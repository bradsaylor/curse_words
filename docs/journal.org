* Journal.c
** Initialize curses screen
*** void
*** display.c
** Loop while !quit
*** get menu selections for current state
**** program state 
**** io.c
*** update curses display with menu
**** menu print string
**** display.c
*** move cursor to prompt window
**** display.c
*** prompt for input
**** io.c
*** validate input
**** program state, input
**** io.c
***** validate input
***** change state depedning on input
*** call sub-program depending on input
**** program state
**** buffer.c or search.c
*** update curses display from sub-program output
**** sub-program output
**** display.c
** End curses mode
*** void
*** display.c
* Display.c
** curses_init(void)
*** define windows and box them in
*** set environment variables
*** return 0
** curses_update(window, update string, command, attribute)
*** update specified window by 
**** printing update string
**** executing command
**** above with attribute
**** return 0
** upate_buffer(char input)
*** write input to buffer window
* io.c
** return_menu_string(state)
*** return specified menu string for given state
*** return 1 if state does not exist, write to error log
** validate_input(state, input)
*** check passed input against allowed input for program state
*** return -1 if input not allowed, print to prompt
*** return new state if successful
* buffer.c
** buffer(void)
*** run getch loop
*** update buffer window
**** char input
**** display.c
*** watch for escape sequence
*** watch for
**** escape sequency
**** wrap_line condition
**** backspace 
**** new line
*** On escape sequence write to file
**** buffer
**** files.c
** wrap_line()
** backspace()
** new_line()
* search.c
* files.c
** append to journal file
*** file name
*** string to append
* todo



* Search organization
** Passed a search string and a mode
*** Search string -> formatted date, keyword, text block
*** mode -> date, text block
** Structure broken down into mode specific funcs and helper funcs
* Flow 
** if mode = date
*** translate date string into a min/max pair                          :fn:
*** tokenize journal file by delim character                           :fn:
*** search each token for a date                                       :fn:
*** if found date string is between min and max write token out to a temporary results file with index
*** if found results                                                   :fn:
**** display first result in buffer window
**** prompt for next or previous result
**** if exists go to indicated indexed result
**** if last result and forward, or first result and backward display message and do nothing
*** if did not find results                                            :fn:
**** display message and return to home menu
** if mode = text
*** tokenize journal file by delim character
*** search token for the indicated text
*** if found write token out to a temporary results file with index
*** if found results
**** display first result in buffer window
**** prompt for next or previous result
**** if exists go to indicated indexed result
**** if last result and forward, or first result and backward display message and do nothing
*** if did not find results
**** display message and return to home menu

